// <auto-generated />
using System;
using HospitalGests.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalGests.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalGests.Model.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitalGests.Model.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("HospitalGests.Model.Beds", b =>
                {
                    b.Property<int>("Bed_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Bed_ID");

                    b.HasIndex("PatientId");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("HospitalGests.Model.ConsultingRooms", b =>
                {
                    b.Property<int>("ConsultingRoom_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultingRoom_ID"));

                    b.Property<int>("Departament_Id")
                        .HasColumnType("int");

                    b.Property<int>("Location_ID")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.HasKey("ConsultingRoom_ID");

                    b.HasIndex("Departament_Id");

                    b.HasIndex("Location_ID");

                    b.HasIndex("RoomID");

                    b.ToTable("ConsultingRooms");
                });

            modelBuilder.Entity("HospitalGests.Model.Departments", b =>
                {
                    b.Property<int>("Department_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Department_Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Department_Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("HospitalGests.Model.DiagnosisSecondary", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisId"));

                    b.Property<string>("DiagnosisDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("DiagnosisSecondaries");
                });

            modelBuilder.Entity("HospitalGests.Model.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialitieId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("SpecialitieId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HospitalGests.Model.ExamResults", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Results")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("HospitalGests.Model.Locations", b =>
                {
                    b.Property<int>("Location_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Denomination")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.HasKey("Location_Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("HospitalGests.Model.MedicalEquipments", b =>
                {
                    b.Property<int>("Id_Equipment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Equipment"));

                    b.Property<int>("Department_Id")
                        .HasColumnType("int");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Location_Id")
                        .HasColumnType("int");

                    b.Property<int>("StockEquipment")
                        .HasColumnType("int");

                    b.HasKey("Id_Equipment");

                    b.HasIndex("Department_Id");

                    b.HasIndex("Location_Id");

                    b.ToTable("MedicalEquipments");
                });

            modelBuilder.Entity("HospitalGests.Model.MedicalNotes", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<DateTime?>("DateNote")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("NoteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("MedicalNotes");
                });

            modelBuilder.Entity("HospitalGests.Model.MedicalRecords", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<DateTime?>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiagnosisPrincipal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HospitalGests.Model.Medicationdelivery", b =>
                {
                    b.Property<int>("IdDelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDelivery"));

                    b.Property<DateTime>("DeliDaTe")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveredQuantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdPharmacy")
                        .HasColumnType("int");

                    b.Property<int>("IdPrescription")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDelivery");

                    b.HasIndex("IdPharmacy");

                    b.HasIndex("IdPrescription");

                    b.ToTable("Medicationdelivery");
                });

            modelBuilder.Entity("HospitalGests.Model.Medicines", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPrescription")
                        .HasColumnType("int");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("QuantityAvaiable")
                        .HasColumnType("real");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int");

                    b.HasKey("MedicineId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HospitalGests.Model.Occupation", b =>
                {
                    b.Property<int>("Occupation_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Occupation_Id"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Location_Id")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RoomID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Occupation_Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("Location_Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomID");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("HospitalGests.Model.OperatingRooms", b =>
                {
                    b.Property<int>("OperatingRoom_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperatingRoom_ID"));

                    b.Property<int>("Department_Id")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("OperatingRoomStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("OperatingRoom_ID");

                    b.HasIndex("Department_Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("OperatingRooms");
                });

            modelBuilder.Entity("HospitalGests.Model.Patients", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitalGests.Model.Persons", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direcction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Document")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponsibleFamilyMemberId")
                        .HasColumnType("int");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPerson");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("HospitalGests.Model.Pharmacy", b =>
                {
                    b.Property<int>("IdPharmacy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPharmacy"));

                    b.Property<string>("Direcction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Others")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pharmacyname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPharmacy");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("HospitalGests.Model.Prescriptions", b =>
                {
                    b.Property<int>("IdPrescription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Dateissue")
                        .HasColumnType("date");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPrescription");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HospitalGests.Model.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReminderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReminderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReminderType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReminderId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("HospitalGests.Model.ResponsibleFamilyMember", b =>
                {
                    b.Property<int>("ResponsibleFamilyMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int");

                    b.Property<bool>("IsPatient")
                        .HasColumnType("bit");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponsibleFamilyMemberId");

                    b.ToTable("ResponsibleFamilyMembers");
                });

            modelBuilder.Entity("HospitalGests.Model.Rooms", b =>
                {
                    b.Property<int>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomID"));

                    b.Property<int>("Bed_ID")
                        .HasColumnType("int");

                    b.Property<int>("Location_Id")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("StatusRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomID");

                    b.HasIndex("PatientId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("HospitalGests.Model.Specialties", b =>
                {
                    b.Property<int>("SpecialitieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialitieId"));

                    b.Property<string>("SpecialitieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialitieId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("HospitalGests.Model.Stockmedicines", b =>
                {
                    b.Property<int>("Idstock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idstock"));

                    b.Property<int>("IdPharmacy")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Lastupdate")
                        .HasColumnType("date");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("Stockquantity")
                        .HasColumnType("int");

                    b.HasKey("Idstock");

                    b.HasIndex("IdPharmacy");

                    b.HasIndex("MedicineId");

                    b.ToTable("Stockmedicines");
                });

            modelBuilder.Entity("HospitalGests.Model.Treatments", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentId"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalRecordID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TreatmentEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TreatmentStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TreatmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TreatmentId");

                    b.HasIndex("MedicalRecordID");

                    b.ToTable("Treatments");
                });

            modelBuilder.Entity("HospitalGests.Model.Appointment", b =>
                {
                    b.HasOne("HospitalGests.Model.Doctor", "Doctors")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalGests.Model.Availability", b =>
                {
                    b.HasOne("HospitalGests.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalGests.Model.Beds", b =>
                {
                    b.HasOne("HospitalGests.Model.Rooms", "Rooms")
                        .WithOne("Beds")
                        .HasForeignKey("HospitalGests.Model.Beds", "Bed_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patients");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalGests.Model.ConsultingRooms", b =>
                {
                    b.HasOne("HospitalGests.Model.Departments", "Departments")
                        .WithMany()
                        .HasForeignKey("Departament_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Locations", "Locations")
                        .WithMany()
                        .HasForeignKey("Location_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Rooms", "Rooms")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Locations");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalGests.Model.DiagnosisSecondary", b =>
                {
                    b.HasOne("HospitalGests.Model.MedicalRecords", "MedicalRecords")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("HospitalGests.Model.Doctor", b =>
                {
                    b.HasOne("HospitalGests.Model.Specialties", "Specialties")
                        .WithMany()
                        .HasForeignKey("SpecialitieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("HospitalGests.Model.ExamResults", b =>
                {
                    b.HasOne("HospitalGests.Model.MedicalRecords", "MedicalRecords")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("HospitalGests.Model.Locations", b =>
                {
                    b.HasOne("HospitalGests.Model.Rooms", "Rooms")
                        .WithOne("Locations")
                        .HasForeignKey("HospitalGests.Model.Locations", "Location_Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalGests.Model.MedicalEquipments", b =>
                {
                    b.HasOne("HospitalGests.Model.Departments", "Departments")
                        .WithMany()
                        .HasForeignKey("Department_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Locations", "Locations")
                        .WithMany()
                        .HasForeignKey("Location_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("HospitalGests.Model.MedicalNotes", b =>
                {
                    b.HasOne("HospitalGests.Model.MedicalRecords", "MedicalRecords")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("HospitalGests.Model.MedicalRecords", b =>
                {
                    b.HasOne("HospitalGests.Model.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalGests.Model.Medicationdelivery", b =>
                {
                    b.HasOne("HospitalGests.Model.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("IdPharmacy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Prescriptions", "Prescriptions")
                        .WithMany()
                        .HasForeignKey("IdPrescription")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalGests.Model.Medicines", b =>
                {
                    b.HasOne("HospitalGests.Model.Treatments", "Treatment")
                        .WithMany()
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("HospitalGests.Model.Occupation", b =>
                {
                    b.HasOne("HospitalGests.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("HospitalGests.Model.Locations", "Locations")
                        .WithMany()
                        .HasForeignKey("Location_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HospitalGests.Model.Rooms", "Rooms")
                        .WithMany()
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Locations");

                    b.Navigation("Patients");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HospitalGests.Model.OperatingRooms", b =>
                {
                    b.HasOne("HospitalGests.Model.Departments", "Departments")
                        .WithMany()
                        .HasForeignKey("Department_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Doctor", "Doctors")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalGests.Model.Patients", b =>
                {
                    b.HasOne("HospitalGests.Model.Persons", "Person")
                        .WithOne("Patient")
                        .HasForeignKey("HospitalGests.Model.Patients", "PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HospitalGests.Model.Persons", b =>
                {
                    b.HasOne("HospitalGests.Model.Doctor", "Doctor")
                        .WithOne("Persons")
                        .HasForeignKey("HospitalGests.Model.Persons", "IdPerson")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalGests.Model.Prescriptions", b =>
                {
                    b.HasOne("HospitalGests.Model.Medicines", "Medicines")
                        .WithOne("Prescriptions")
                        .HasForeignKey("HospitalGests.Model.Prescriptions", "IdPrescription")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.MedicalRecords", "MedicalRecords")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecords");

                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalGests.Model.Reminder", b =>
                {
                    b.HasOne("HospitalGests.Model.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalGests.Model.ResponsibleFamilyMember", b =>
                {
                    b.HasOne("HospitalGests.Model.Persons", "Person")
                        .WithOne("ResponsibleFamilyMember")
                        .HasForeignKey("HospitalGests.Model.ResponsibleFamilyMember", "ResponsibleFamilyMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("HospitalGests.Model.Rooms", b =>
                {
                    b.HasOne("HospitalGests.Model.Patients", "Patients")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HospitalGests.Model.Stockmedicines", b =>
                {
                    b.HasOne("HospitalGests.Model.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("IdPharmacy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalGests.Model.Medicines", "Medicines")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicines");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("HospitalGests.Model.Treatments", b =>
                {
                    b.HasOne("HospitalGests.Model.MedicalRecords", "MedicalRecords")
                        .WithMany()
                        .HasForeignKey("MedicalRecordID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("HospitalGests.Model.Doctor", b =>
                {
                    b.Navigation("Persons")
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalGests.Model.Medicines", b =>
                {
                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("HospitalGests.Model.Persons", b =>
                {
                    b.Navigation("Patient");

                    b.Navigation("ResponsibleFamilyMember");
                });

            modelBuilder.Entity("HospitalGests.Model.Rooms", b =>
                {
                    b.Navigation("Beds")
                        .IsRequired();

                    b.Navigation("Locations");
                });
#pragma warning restore 612, 618
        }
    }
}
